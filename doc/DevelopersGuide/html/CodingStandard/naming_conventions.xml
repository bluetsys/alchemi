<h2>Naming Conventions</h2>

<ol>
  <li>
    <p>
      Use Pascal casing for type and method names and constants:
    </p>
    <pre>
public class <b>S</b>ome<b>C</b>lass
{
  const int <b>D</b>efault<b>S</b>ize = 100;
  public <b>S</b>ome<b>M</b>ethod()
  {
  }
}
    </pre>
  </li>

  <li>
    <p>
      Use camel casing for local variable names and method arguments:
    </p>
    <pre>
int <b>n</b>umber;
void MyMethod(int <b>s</b>ome<b>N</b>umber)
{}
    </pre>
  </li>

  <li>
    <p>
      Prefix interface names with "I":
    </p>
    <pre>
interface <b>I</b>MyInterface
{}
    </pre>  
  </li>

  <li>
    Prefix private member variables with and underscore ("_") and use camel casing.
    <pre>
private string _userCredentials;
    </pre>
  </li>

  <li>
    Suffix custom attribute classes with "Attribute".
  </li>

  <li>
    Suffix custom exception classes with "Exception".
  </li>

  <li>
    Name methods using verb/object pairs, such as ShowDialog().
  </li>

  <li>
    Methods with return values should have names describing the values returned, such as GetObjectState().
  </li>

  <li>
    Use descriptive variable names.
    <ol type="a">
      <li>
        Avoid single-character variables names, such as i or t.  Use index or temp instead.
      </li>
      <li>
        Avoid using Hungarian notation for public or protected members.
      </li>
      <li>
        Avoid using abbreviated words (such as num instead of number).
      </li>
    </ol>
  </li>

  <li>
    Always use C# predefined types, rather than the aliases in the System namespace.  For example:
    <pre>
object NOT Object
string NOT String
int    NOT Int32
    </pre>
  </li>

  <li>
    With generics, use capital letters for types.  Reserve suffixing Type for when dealing with the .NET type Type:
    <pre>
// Correct:
public class LinkedList&lt;K,T&gt;
{}
// Avoid:
public class LinkedList&lt;KeyType,DataType&gt;
{}
    </pre>
  </li>

  <li>
    Use meaningful namespace names, such as the product name, company name, or developer's name.
  </li>

  <li>
    Avoid fully-qualified type names.  Use the using statement instead.
  </li>

  <li>
    Avoid putting a using statement inside of a namespace.
  </li>

  <li>
    Group all framework namespaces together and put custom or third-party namespaces underneath, separated by a blank line:
    <pre>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;

using Alchemi.Core;
using Alchemi.Core.Manager.Storage;

using NPlot;
    </pre>
  </li>

  <li>
    Use delegate inference instead of explicit delegate instantiation:
    <pre>
delegate void SomeDelegate();
public void SomeMethod()
{...}
// Correct:
SomeDelegate someDelegate = SomeMethod;
// Avoid:
SomeDelegate someDelegate = new SomeDelegate(SomeMethod);
    </pre>
  </li>

  <li>
    Indent comments at the same level of indentation as the code that you are documenting.
  </li>

  <li>
    All comments should pass spellchecking.  Misspelled comments indicate sloppy development.
  </li>

  <li>
    Declare a variable as close as possible to its first use.
  </li>

  <li>
    A filename should reflect the class it contains.
  </li>

  <li>
    Autogenerated code (such as that generated by the Visual Studio Windows Forms designer) should be placed in a .Designer.cs file with the same name as the class.
  </li>

  <li>
    Always place an open curly brace ({) on a new line.
  </li>

  <li>
    With anonymous methods, mimic the code layout of a regular method, aligned with the anonymous delegate declaration (this complies with placing an open curly brace on a new line):
    <pre>
delegate void SomeDelegate(string someString);
// Correct:
public void InvokeMethod()
{
  SomeDelegate someDelegate = delegate(string name)
                              {
                                MessageBox.Show(name)
                              };
  someDelegate("Juval");
}
// Avoid:
public void InvokeMethod()
{
  SomeDelegate someDelegate = delegate(string name) { MessageBox.Show(name); };
  someDelegate("Juval");
}
    </pre>
  </li>


  
  
</ol>